class Solution {
public:
    int merge(vector<int>& nums,int lb,int mid,int ub){
        
        int i=lb,j=mid+1,k=0,count=0,m=mid+1;
        int temp[ub-lb+1];
           for(int l = lb;l<=mid;l++) {
            while(m<=ub && nums[l] > ((long)2*nums[m])) {
                m++;
            }
            count += (m - (mid+1));
        }
        while(i<=mid && j<=ub){
            if(nums[i]<=nums[j]){
                temp[k++]=nums[i++];
            }else{
              //  if(nums[i]>(2*nums[j]))
                 //   count=mid-i;//+1;
                temp[k++]=nums[j++];
            }
        }
        
        while(i<=mid){
            temp[k++]=nums[i++];
        }
        
         while(j<=ub){
            temp[k++]=nums[j++];
        }
        
        k=0;
        for(i=lb;i<=ub;i++){
            nums[i]=temp[k++];
        }
        
        return count;
    }
    
    int mergeSort(vector<int>& nums,int lb,int ub){
        int count=0;
        if(lb<ub){
            int mid=(lb+ub)/2;
            count+=mergeSort(nums,lb,mid);
            count+=mergeSort(nums,mid+1,ub);
            count+=merge(nums,lb,mid,ub);
        }
        return count;
    }
    
    int reversePairs(vector<int>& nums) {
          return mergeSort(nums,0,nums.size()-1);
    }
};