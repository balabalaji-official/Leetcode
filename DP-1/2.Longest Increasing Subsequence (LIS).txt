class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
       int n=nums.size();
        vector<int> dp(n);
        dp[0]=1;
    
        // for(int i=n-2; i>=0; i--) {
        //     // dp[i] = f(i)
        //     int ans = 0;
        //     for(int j=i+1;  j<n; j++) {
        //         if(nums[j] > nums[i]) {  //we don't consider A[j] >= A[i] as the question asks for strictly increasing subsequences
        //             ans = max(ans, dp[j]);
        //         }
        //     }
        //     dp[i] = 1 + ans;
        //     // finalAns = max(finalAns, dp[i]);
        // }
        
        for(int i=1;i<n;i++){
            int ans=0;
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i]){
                    ans=max(ans,dp[j]);
                }
            }
            dp[i]=1+ans;
        }
        return *max_element(dp.begin(),dp.end());
    
    }
};